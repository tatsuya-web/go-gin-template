// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/tatuya-web/go-gin-template/domain/model"
	"github.com/tatuya-web/go-gin-template/repository"
	"net/http"
	"sync"
)

// Ensure, that PostAdderMock does implement PostAdder.
// If this is not the case, regenerate this file with moq.
var _ PostAdder = &PostAdderMock{}

// PostAdderMock is a mock implementation of PostAdder.
//
//	func TestSomethingThatUsesPostAdder(t *testing.T) {
//
//		// make and configure a mocked PostAdder
//		mockedPostAdder := &PostAdderMock{
//			AddPostFunc: func(ctx context.Context, db repository.Execer, p *model.Post) error {
//				panic("mock out the AddPost method")
//			},
//		}
//
//		// use mockedPostAdder in code that requires PostAdder
//		// and then make assertions.
//
//	}
type PostAdderMock struct {
	// AddPostFunc mocks the AddPost method.
	AddPostFunc func(ctx context.Context, db repository.Execer, p *model.Post) error

	// calls tracks calls to the methods.
	calls struct {
		// AddPost holds details about calls to the AddPost method.
		AddPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db repository.Execer
			// P is the p argument value.
			P *model.Post
		}
	}
	lockAddPost sync.RWMutex
}

// AddPost calls AddPostFunc.
func (mock *PostAdderMock) AddPost(ctx context.Context, db repository.Execer, p *model.Post) error {
	if mock.AddPostFunc == nil {
		panic("PostAdderMock.AddPostFunc: method is nil but PostAdder.AddPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  repository.Execer
		P   *model.Post
	}{
		Ctx: ctx,
		Db:  db,
		P:   p,
	}
	mock.lockAddPost.Lock()
	mock.calls.AddPost = append(mock.calls.AddPost, callInfo)
	mock.lockAddPost.Unlock()
	return mock.AddPostFunc(ctx, db, p)
}

// AddPostCalls gets all the calls that were made to AddPost.
// Check the length with:
//
//	len(mockedPostAdder.AddPostCalls())
func (mock *PostAdderMock) AddPostCalls() []struct {
	Ctx context.Context
	Db  repository.Execer
	P   *model.Post
} {
	var calls []struct {
		Ctx context.Context
		Db  repository.Execer
		P   *model.Post
	}
	mock.lockAddPost.RLock()
	calls = mock.calls.AddPost
	mock.lockAddPost.RUnlock()
	return calls
}

// Ensure, that PostUpdaterMock does implement PostUpdater.
// If this is not the case, regenerate this file with moq.
var _ PostUpdater = &PostUpdaterMock{}

// PostUpdaterMock is a mock implementation of PostUpdater.
//
//	func TestSomethingThatUsesPostUpdater(t *testing.T) {
//
//		// make and configure a mocked PostUpdater
//		mockedPostUpdater := &PostUpdaterMock{
//			IsOwnPostFunc: func(ctx context.Context, db repository.Queryer, id model.PostID) bool {
//				panic("mock out the IsOwnPost method")
//			},
//			UpdatePostFunc: func(ctx context.Context, db repository.Execer, p *model.Post) error {
//				panic("mock out the UpdatePost method")
//			},
//		}
//
//		// use mockedPostUpdater in code that requires PostUpdater
//		// and then make assertions.
//
//	}
type PostUpdaterMock struct {
	// IsOwnPostFunc mocks the IsOwnPost method.
	IsOwnPostFunc func(ctx context.Context, db repository.Queryer, id model.PostID) bool

	// UpdatePostFunc mocks the UpdatePost method.
	UpdatePostFunc func(ctx context.Context, db repository.Execer, p *model.Post) error

	// calls tracks calls to the methods.
	calls struct {
		// IsOwnPost holds details about calls to the IsOwnPost method.
		IsOwnPost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db repository.Queryer
			// ID is the id argument value.
			ID model.PostID
		}
		// UpdatePost holds details about calls to the UpdatePost method.
		UpdatePost []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db repository.Execer
			// P is the p argument value.
			P *model.Post
		}
	}
	lockIsOwnPost  sync.RWMutex
	lockUpdatePost sync.RWMutex
}

// IsOwnPost calls IsOwnPostFunc.
func (mock *PostUpdaterMock) IsOwnPost(ctx context.Context, db repository.Queryer, id model.PostID) bool {
	if mock.IsOwnPostFunc == nil {
		panic("PostUpdaterMock.IsOwnPostFunc: method is nil but PostUpdater.IsOwnPost was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  repository.Queryer
		ID  model.PostID
	}{
		Ctx: ctx,
		Db:  db,
		ID:  id,
	}
	mock.lockIsOwnPost.Lock()
	mock.calls.IsOwnPost = append(mock.calls.IsOwnPost, callInfo)
	mock.lockIsOwnPost.Unlock()
	return mock.IsOwnPostFunc(ctx, db, id)
}

// IsOwnPostCalls gets all the calls that were made to IsOwnPost.
// Check the length with:
//
//	len(mockedPostUpdater.IsOwnPostCalls())
func (mock *PostUpdaterMock) IsOwnPostCalls() []struct {
	Ctx context.Context
	Db  repository.Queryer
	ID  model.PostID
} {
	var calls []struct {
		Ctx context.Context
		Db  repository.Queryer
		ID  model.PostID
	}
	mock.lockIsOwnPost.RLock()
	calls = mock.calls.IsOwnPost
	mock.lockIsOwnPost.RUnlock()
	return calls
}

// UpdatePost calls UpdatePostFunc.
func (mock *PostUpdaterMock) UpdatePost(ctx context.Context, db repository.Execer, p *model.Post) error {
	if mock.UpdatePostFunc == nil {
		panic("PostUpdaterMock.UpdatePostFunc: method is nil but PostUpdater.UpdatePost was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  repository.Execer
		P   *model.Post
	}{
		Ctx: ctx,
		Db:  db,
		P:   p,
	}
	mock.lockUpdatePost.Lock()
	mock.calls.UpdatePost = append(mock.calls.UpdatePost, callInfo)
	mock.lockUpdatePost.Unlock()
	return mock.UpdatePostFunc(ctx, db, p)
}

// UpdatePostCalls gets all the calls that were made to UpdatePost.
// Check the length with:
//
//	len(mockedPostUpdater.UpdatePostCalls())
func (mock *PostUpdaterMock) UpdatePostCalls() []struct {
	Ctx context.Context
	Db  repository.Execer
	P   *model.Post
} {
	var calls []struct {
		Ctx context.Context
		Db  repository.Execer
		P   *model.Post
	}
	mock.lockUpdatePost.RLock()
	calls = mock.calls.UpdatePost
	mock.lockUpdatePost.RUnlock()
	return calls
}

// Ensure, that PostListerMock does implement PostLister.
// If this is not the case, regenerate this file with moq.
var _ PostLister = &PostListerMock{}

// PostListerMock is a mock implementation of PostLister.
//
//	func TestSomethingThatUsesPostLister(t *testing.T) {
//
//		// make and configure a mocked PostLister
//		mockedPostLister := &PostListerMock{
//			ListPostsFunc: func(ctx context.Context, db repository.Queryer, id model.UserID) (model.Posts, error) {
//				panic("mock out the ListPosts method")
//			},
//		}
//
//		// use mockedPostLister in code that requires PostLister
//		// and then make assertions.
//
//	}
type PostListerMock struct {
	// ListPostsFunc mocks the ListPosts method.
	ListPostsFunc func(ctx context.Context, db repository.Queryer, id model.UserID) (model.Posts, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListPosts holds details about calls to the ListPosts method.
		ListPosts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db repository.Queryer
			// ID is the id argument value.
			ID model.UserID
		}
	}
	lockListPosts sync.RWMutex
}

// ListPosts calls ListPostsFunc.
func (mock *PostListerMock) ListPosts(ctx context.Context, db repository.Queryer, id model.UserID) (model.Posts, error) {
	if mock.ListPostsFunc == nil {
		panic("PostListerMock.ListPostsFunc: method is nil but PostLister.ListPosts was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  repository.Queryer
		ID  model.UserID
	}{
		Ctx: ctx,
		Db:  db,
		ID:  id,
	}
	mock.lockListPosts.Lock()
	mock.calls.ListPosts = append(mock.calls.ListPosts, callInfo)
	mock.lockListPosts.Unlock()
	return mock.ListPostsFunc(ctx, db, id)
}

// ListPostsCalls gets all the calls that were made to ListPosts.
// Check the length with:
//
//	len(mockedPostLister.ListPostsCalls())
func (mock *PostListerMock) ListPostsCalls() []struct {
	Ctx context.Context
	Db  repository.Queryer
	ID  model.UserID
} {
	var calls []struct {
		Ctx context.Context
		Db  repository.Queryer
		ID  model.UserID
	}
	mock.lockListPosts.RLock()
	calls = mock.calls.ListPosts
	mock.lockListPosts.RUnlock()
	return calls
}

// Ensure, that UserRegisterMock does implement UserRegister.
// If this is not the case, regenerate this file with moq.
var _ UserRegister = &UserRegisterMock{}

// UserRegisterMock is a mock implementation of UserRegister.
//
//	func TestSomethingThatUsesUserRegister(t *testing.T) {
//
//		// make and configure a mocked UserRegister
//		mockedUserRegister := &UserRegisterMock{
//			RegisterUserFunc: func(ctx context.Context, db repository.Execer, u *model.User) error {
//				panic("mock out the RegisterUser method")
//			},
//		}
//
//		// use mockedUserRegister in code that requires UserRegister
//		// and then make assertions.
//
//	}
type UserRegisterMock struct {
	// RegisterUserFunc mocks the RegisterUser method.
	RegisterUserFunc func(ctx context.Context, db repository.Execer, u *model.User) error

	// calls tracks calls to the methods.
	calls struct {
		// RegisterUser holds details about calls to the RegisterUser method.
		RegisterUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db repository.Execer
			// U is the u argument value.
			U *model.User
		}
	}
	lockRegisterUser sync.RWMutex
}

// RegisterUser calls RegisterUserFunc.
func (mock *UserRegisterMock) RegisterUser(ctx context.Context, db repository.Execer, u *model.User) error {
	if mock.RegisterUserFunc == nil {
		panic("UserRegisterMock.RegisterUserFunc: method is nil but UserRegister.RegisterUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  repository.Execer
		U   *model.User
	}{
		Ctx: ctx,
		Db:  db,
		U:   u,
	}
	mock.lockRegisterUser.Lock()
	mock.calls.RegisterUser = append(mock.calls.RegisterUser, callInfo)
	mock.lockRegisterUser.Unlock()
	return mock.RegisterUserFunc(ctx, db, u)
}

// RegisterUserCalls gets all the calls that were made to RegisterUser.
// Check the length with:
//
//	len(mockedUserRegister.RegisterUserCalls())
func (mock *UserRegisterMock) RegisterUserCalls() []struct {
	Ctx context.Context
	Db  repository.Execer
	U   *model.User
} {
	var calls []struct {
		Ctx context.Context
		Db  repository.Execer
		U   *model.User
	}
	mock.lockRegisterUser.RLock()
	calls = mock.calls.RegisterUser
	mock.lockRegisterUser.RUnlock()
	return calls
}

// Ensure, that UserGetterMock does implement UserGetter.
// If this is not the case, regenerate this file with moq.
var _ UserGetter = &UserGetterMock{}

// UserGetterMock is a mock implementation of UserGetter.
//
//	func TestSomethingThatUsesUserGetter(t *testing.T) {
//
//		// make and configure a mocked UserGetter
//		mockedUserGetter := &UserGetterMock{
//			GetUserFunc: func(ctx context.Context, db repository.Queryer, email string) (*model.User, error) {
//				panic("mock out the GetUser method")
//			},
//		}
//
//		// use mockedUserGetter in code that requires UserGetter
//		// and then make assertions.
//
//	}
type UserGetterMock struct {
	// GetUserFunc mocks the GetUser method.
	GetUserFunc func(ctx context.Context, db repository.Queryer, email string) (*model.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetUser holds details about calls to the GetUser method.
		GetUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db repository.Queryer
			// Email is the email argument value.
			Email string
		}
	}
	lockGetUser sync.RWMutex
}

// GetUser calls GetUserFunc.
func (mock *UserGetterMock) GetUser(ctx context.Context, db repository.Queryer, email string) (*model.User, error) {
	if mock.GetUserFunc == nil {
		panic("UserGetterMock.GetUserFunc: method is nil but UserGetter.GetUser was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Db    repository.Queryer
		Email string
	}{
		Ctx:   ctx,
		Db:    db,
		Email: email,
	}
	mock.lockGetUser.Lock()
	mock.calls.GetUser = append(mock.calls.GetUser, callInfo)
	mock.lockGetUser.Unlock()
	return mock.GetUserFunc(ctx, db, email)
}

// GetUserCalls gets all the calls that were made to GetUser.
// Check the length with:
//
//	len(mockedUserGetter.GetUserCalls())
func (mock *UserGetterMock) GetUserCalls() []struct {
	Ctx   context.Context
	Db    repository.Queryer
	Email string
} {
	var calls []struct {
		Ctx   context.Context
		Db    repository.Queryer
		Email string
	}
	mock.lockGetUser.RLock()
	calls = mock.calls.GetUser
	mock.lockGetUser.RUnlock()
	return calls
}

// Ensure, that TokenGeneratorMock does implement TokenGenerator.
// If this is not the case, regenerate this file with moq.
var _ TokenGenerator = &TokenGeneratorMock{}

// TokenGeneratorMock is a mock implementation of TokenGenerator.
//
//	func TestSomethingThatUsesTokenGenerator(t *testing.T) {
//
//		// make and configure a mocked TokenGenerator
//		mockedTokenGenerator := &TokenGeneratorMock{
//			GenerateTokenFunc: func(ctx context.Context, u model.User) ([]byte, error) {
//				panic("mock out the GenerateToken method")
//			},
//		}
//
//		// use mockedTokenGenerator in code that requires TokenGenerator
//		// and then make assertions.
//
//	}
type TokenGeneratorMock struct {
	// GenerateTokenFunc mocks the GenerateToken method.
	GenerateTokenFunc func(ctx context.Context, u model.User) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// GenerateToken holds details about calls to the GenerateToken method.
		GenerateToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// U is the u argument value.
			U model.User
		}
	}
	lockGenerateToken sync.RWMutex
}

// GenerateToken calls GenerateTokenFunc.
func (mock *TokenGeneratorMock) GenerateToken(ctx context.Context, u model.User) ([]byte, error) {
	if mock.GenerateTokenFunc == nil {
		panic("TokenGeneratorMock.GenerateTokenFunc: method is nil but TokenGenerator.GenerateToken was just called")
	}
	callInfo := struct {
		Ctx context.Context
		U   model.User
	}{
		Ctx: ctx,
		U:   u,
	}
	mock.lockGenerateToken.Lock()
	mock.calls.GenerateToken = append(mock.calls.GenerateToken, callInfo)
	mock.lockGenerateToken.Unlock()
	return mock.GenerateTokenFunc(ctx, u)
}

// GenerateTokenCalls gets all the calls that were made to GenerateToken.
// Check the length with:
//
//	len(mockedTokenGenerator.GenerateTokenCalls())
func (mock *TokenGeneratorMock) GenerateTokenCalls() []struct {
	Ctx context.Context
	U   model.User
} {
	var calls []struct {
		Ctx context.Context
		U   model.User
	}
	mock.lockGenerateToken.RLock()
	calls = mock.calls.GenerateToken
	mock.lockGenerateToken.RUnlock()
	return calls
}

// Ensure, that TokenDeleterMock does implement TokenDeleter.
// If this is not the case, regenerate this file with moq.
var _ TokenDeleter = &TokenDeleterMock{}

// TokenDeleterMock is a mock implementation of TokenDeleter.
//
//	func TestSomethingThatUsesTokenDeleter(t *testing.T) {
//
//		// make and configure a mocked TokenDeleter
//		mockedTokenDeleter := &TokenDeleterMock{
//			DeleteTokenFunc: func(ctx context.Context, r *http.Request, id model.UserID) error {
//				panic("mock out the DeleteToken method")
//			},
//		}
//
//		// use mockedTokenDeleter in code that requires TokenDeleter
//		// and then make assertions.
//
//	}
type TokenDeleterMock struct {
	// DeleteTokenFunc mocks the DeleteToken method.
	DeleteTokenFunc func(ctx context.Context, r *http.Request, id model.UserID) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteToken holds details about calls to the DeleteToken method.
		DeleteToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// R is the r argument value.
			R *http.Request
			// ID is the id argument value.
			ID model.UserID
		}
	}
	lockDeleteToken sync.RWMutex
}

// DeleteToken calls DeleteTokenFunc.
func (mock *TokenDeleterMock) DeleteToken(ctx context.Context, r *http.Request, id model.UserID) error {
	if mock.DeleteTokenFunc == nil {
		panic("TokenDeleterMock.DeleteTokenFunc: method is nil but TokenDeleter.DeleteToken was just called")
	}
	callInfo := struct {
		Ctx context.Context
		R   *http.Request
		ID  model.UserID
	}{
		Ctx: ctx,
		R:   r,
		ID:  id,
	}
	mock.lockDeleteToken.Lock()
	mock.calls.DeleteToken = append(mock.calls.DeleteToken, callInfo)
	mock.lockDeleteToken.Unlock()
	return mock.DeleteTokenFunc(ctx, r, id)
}

// DeleteTokenCalls gets all the calls that were made to DeleteToken.
// Check the length with:
//
//	len(mockedTokenDeleter.DeleteTokenCalls())
func (mock *TokenDeleterMock) DeleteTokenCalls() []struct {
	Ctx context.Context
	R   *http.Request
	ID  model.UserID
} {
	var calls []struct {
		Ctx context.Context
		R   *http.Request
		ID  model.UserID
	}
	mock.lockDeleteToken.RLock()
	calls = mock.calls.DeleteToken
	mock.lockDeleteToken.RUnlock()
	return calls
}

// Ensure, that OwnGetterMock does implement OwnGetter.
// If this is not the case, regenerate this file with moq.
var _ OwnGetter = &OwnGetterMock{}

// OwnGetterMock is a mock implementation of OwnGetter.
//
//	func TestSomethingThatUsesOwnGetter(t *testing.T) {
//
//		// make and configure a mocked OwnGetter
//		mockedOwnGetter := &OwnGetterMock{
//			GetOwnFunc: func(ctx context.Context, db repository.Queryer, id model.UserID) (*model.User, error) {
//				panic("mock out the GetOwn method")
//			},
//		}
//
//		// use mockedOwnGetter in code that requires OwnGetter
//		// and then make assertions.
//
//	}
type OwnGetterMock struct {
	// GetOwnFunc mocks the GetOwn method.
	GetOwnFunc func(ctx context.Context, db repository.Queryer, id model.UserID) (*model.User, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetOwn holds details about calls to the GetOwn method.
		GetOwn []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db repository.Queryer
			// ID is the id argument value.
			ID model.UserID
		}
	}
	lockGetOwn sync.RWMutex
}

// GetOwn calls GetOwnFunc.
func (mock *OwnGetterMock) GetOwn(ctx context.Context, db repository.Queryer, id model.UserID) (*model.User, error) {
	if mock.GetOwnFunc == nil {
		panic("OwnGetterMock.GetOwnFunc: method is nil but OwnGetter.GetOwn was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  repository.Queryer
		ID  model.UserID
	}{
		Ctx: ctx,
		Db:  db,
		ID:  id,
	}
	mock.lockGetOwn.Lock()
	mock.calls.GetOwn = append(mock.calls.GetOwn, callInfo)
	mock.lockGetOwn.Unlock()
	return mock.GetOwnFunc(ctx, db, id)
}

// GetOwnCalls gets all the calls that were made to GetOwn.
// Check the length with:
//
//	len(mockedOwnGetter.GetOwnCalls())
func (mock *OwnGetterMock) GetOwnCalls() []struct {
	Ctx context.Context
	Db  repository.Queryer
	ID  model.UserID
} {
	var calls []struct {
		Ctx context.Context
		Db  repository.Queryer
		ID  model.UserID
	}
	mock.lockGetOwn.RLock()
	calls = mock.calls.GetOwn
	mock.lockGetOwn.RUnlock()
	return calls
}

// Ensure, that UserDeleterMock does implement UserDeleter.
// If this is not the case, regenerate this file with moq.
var _ UserDeleter = &UserDeleterMock{}

// UserDeleterMock is a mock implementation of UserDeleter.
//
//	func TestSomethingThatUsesUserDeleter(t *testing.T) {
//
//		// make and configure a mocked UserDeleter
//		mockedUserDeleter := &UserDeleterMock{
//			DeleteUserFunc: func(ctx context.Context, db repository.Execer, p *model.User) error {
//				panic("mock out the DeleteUser method")
//			},
//		}
//
//		// use mockedUserDeleter in code that requires UserDeleter
//		// and then make assertions.
//
//	}
type UserDeleterMock struct {
	// DeleteUserFunc mocks the DeleteUser method.
	DeleteUserFunc func(ctx context.Context, db repository.Execer, p *model.User) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteUser holds details about calls to the DeleteUser method.
		DeleteUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Db is the db argument value.
			Db repository.Execer
			// P is the p argument value.
			P *model.User
		}
	}
	lockDeleteUser sync.RWMutex
}

// DeleteUser calls DeleteUserFunc.
func (mock *UserDeleterMock) DeleteUser(ctx context.Context, db repository.Execer, p *model.User) error {
	if mock.DeleteUserFunc == nil {
		panic("UserDeleterMock.DeleteUserFunc: method is nil but UserDeleter.DeleteUser was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Db  repository.Execer
		P   *model.User
	}{
		Ctx: ctx,
		Db:  db,
		P:   p,
	}
	mock.lockDeleteUser.Lock()
	mock.calls.DeleteUser = append(mock.calls.DeleteUser, callInfo)
	mock.lockDeleteUser.Unlock()
	return mock.DeleteUserFunc(ctx, db, p)
}

// DeleteUserCalls gets all the calls that were made to DeleteUser.
// Check the length with:
//
//	len(mockedUserDeleter.DeleteUserCalls())
func (mock *UserDeleterMock) DeleteUserCalls() []struct {
	Ctx context.Context
	Db  repository.Execer
	P   *model.User
} {
	var calls []struct {
		Ctx context.Context
		Db  repository.Execer
		P   *model.User
	}
	mock.lockDeleteUser.RLock()
	calls = mock.calls.DeleteUser
	mock.lockDeleteUser.RUnlock()
	return calls
}
